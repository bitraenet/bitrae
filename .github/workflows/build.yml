name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '38 13 * * 0'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Dependencies on Ubuntu
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libfmt-dev libsqlite3-dev libminiupnpc-dev libzmq3-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libqrencode-dev g++-mingw-w64-x86-64 nsis
        ./contrib/install_db4.sh $(pwd)
        export BDB_PREFIX=$(pwd)/db4
        echo "BDB_PREFIX is set to $BDB_PREFIX"
      env:
        DEBIAN_FRONTEND: noninteractive

    - name: Build on Ubuntu
      if: matrix.os == 'ubuntu-18.04'
      run: |
        export BDB_PREFIX=$(pwd)/db4
        ./autogen.sh
        ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include"
        make

    - name: Set up Dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install nsis
        choco install msys2
        refreshenv
        msys2 -c "pacman -Syu --noconfirm"
        msys2 -c "pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-boost mingw-w64-x86_64-libevent mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq"
        msys2 -c "pacman -S --noconfirm mingw-w64-x86_64-gcc"
        msys2 -c "echo 'export PATH=/mingw64/bin:$PATH' >> ~/.bashrc"
        msys2 -c "source ~/.bashrc"
        msys2 -c "./contrib/install_db4.sh $(pwd)"
        msys2 -c "export BDB_PREFIX=$(pwd)/db4"
        msys2 -c "echo 'BDB_PREFIX is set to $BDB_PREFIX'"

    - name: Build on Windows
      if: matrix.os == 'windows-latest'
      run: |
        export BDB_PREFIX=$(pwd)/db4
        ./autogen.sh
        ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include" --host=x86_64-w64-mingw32 --prefix=/usr/local --disable-tests --disable-gui-tests
        mingw32-make
        mingw32-make deploy
      shell: msys2 {0}

    - name: Set up Dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install autoconf automake libtool pkg-config boost openssl qt berkeley-db@4 zmq
        echo 'export PATH="/usr/local/opt/berkeley-db@4/bin:$PATH"' >> ~/.bash_profile
        echo 'export LDFLAGS="-L/usr/local/opt/berkeley-db@4/lib"' >> ~/.bash_profile
        echo 'export CPPFLAGS="-I/usr/local/opt/berkeley-db@4/include"' >> ~/.bash_profile
        echo 'export PKG_CONFIG_PATH="/usr/local/opt/berkeley-db@4/lib/pkgconfig"' >> ~/.bash_profile
        source ~/.bash_profile
        ./contrib/install_db4.sh $(pwd)
        export BDB_PREFIX=$(pwd)/db4
        echo "BDB_PREFIX is set to $BDB_PREFIX"
        python3 -m pip install setuptools ez_setup

    - name: Build on macOS
      if: matrix.os == 'macos-latest'
      run: |
        export BDB_PREFIX=$(pwd)/db4
        ./autogen.sh
        ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include"
        make

    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: |
          osx/dist/Bitrae-Qt.app
          bitrae-0.1.0-win64-setup-unsigned.exe
          bitrae-0.1.0-linux-x86_64.tar.gz

