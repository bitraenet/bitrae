name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '38 13 * * 0'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]
        include:
        - os: ubuntu-18.04
          build-mode: manual
        - os: windows-latest
          build-mode: manual
        - os: macos-latest
          build-mode: manual

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Dependencies on Ubuntu
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libfmt-dev libsqlite3-dev libminiupnpc-dev libzmq3-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libqrencode-dev g++-mingw-w64-x86-64 nsis
        ./contrib/install_db4.sh $(pwd)
        export BDB_PREFIX=$(pwd)/db4
        echo "BDB_PREFIX is set to $BDB_PREFIX"

    - name: Set up Dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y msys2
        choco install -y mingw
        choco install -y nsis
        refreshenv
        C:\tools\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm"
        C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain"
        C:\tools\msys64\usr\bin\bash -lc "echo 'export PATH=/mingw64/bin:$PATH' >> ~/.bashrc"
        C:\tools\msys64\usr\bin\bash -lc "source ~/.bashrc"
        C:\tools\msys64\usr\bin\bash -lc "cd ${GITHUB_WORKSPACE} && ./contrib/install_db4.sh $(pwd)"
        C:\tools\msys64\usr\bin\bash -lc "export BDB_PREFIX=$(pwd)/db4"
        echo "BDB_PREFIX is set to $BDB_PREFIX"

    - name: Set up Dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install automake libtool miniupnpc pkg-config python libevent qrencode fmt librsvg sqlite zmq
        brew install qt@5
        echo 'export PATH="/usr/local/opt/qt@5/bin:$PATH"' >> ~/.zprofile
        echo 'export LDFLAGS="-L/usr/local/opt/qt@5/lib -L/opt/homebrew/opt/berkeley-db@4/lib -L/opt/homebrew/opt/fmt/lib"' >> ~/.zprofile
        echo 'export CPPFLAGS="-I/usr/local/opt/qt@5/include -I/opt/homebrew/opt/berkeley-db@4/include -I/opt/homebrew/opt/fmt/include"' >> ~/.zprofile
        echo 'export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig:/opt/homebrew/opt/berkeley-db@4/lib/pkgconfig:/opt/homebrew/opt/fmt/lib/pkgconfig"' >> ~/.zprofile
        source ~/.zprofile
        python3 -m venv venv
        source venv/bin/activate
        pip install setuptools ez_setup

    - name: Verify compiler on macOS
      if: matrix.os == 'macos-latest'
      run: |
        g++ --version
        g++ -xc++ -E -v -

    - name: Build Dependencies using the depends system on macOS
      if: matrix.os == 'macos-latest'
      run: |
        source venv/bin/activate
        cd depends
        make HOST=x86_64-apple-darwin
        cd ..

    - name: Build Dependencies using the depends system on Ubuntu
      if: matrix.os == 'ubuntu-18.04'
      run: |
        cd depends
        make HOST=x86_64-pc-linux-gnu
        cd ..

    - name: Build Dependencies using the depends system on Windows
      if: matrix.os == 'windows-latest'
      shell: bash {0}
      run: |
        cd depends
        make HOST=x86_64-w64-mingw32
        cd ..

    - name: Configure and Build on Ubuntu for Windows
      if: matrix.os == 'ubuntu-18.04'
      run: |
        export BDB_PREFIX=$(pwd)/db4
        PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g') # Strip out problematic Windows %PATH% imported vars
        ./autogen.sh
        CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include" --host=x86_64-w64-mingw32 --prefix=/usr/local --disable-tests --disable-gui-tests
        make
        make deploy

    - name: Configure and Build on macOS
      if: matrix.os == 'macos-latest'
      run: |
        export BDB_PREFIX=/opt/homebrew/opt/berkeley-db@4
        export CXXFLAGS="-I/opt/homebrew/opt/berkeley-db@4/include -I/opt/homebrew/opt/fmt/include -I/usr/local/opt/qt@5/include"
        export LDFLAGS="-L/opt/homebrew/opt/berkeley-db@4/lib -L/opt/homebrew/opt/fmt/lib -L/usr/local/opt/qt@5/lib"
        source venv/bin/activate
        ./autogen.sh
        CONFIG_SITE=$PWD/depends/x86_64-apple-darwin/share/config.site ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include" --prefix=/usr/local --with-qt-dir=/usr/local/opt/qt@5 --with-qt-incdir=/usr/local/opt/qt@5/include --with-qt-libdir=/usr/local/opt/qt@5/lib
        make
        make deploy

    - name: Configure and Build on Ubuntu for Linux
      if: matrix.os == 'ubuntu-18.04'
      run: |
        export BDB_PREFIX=$(pwd)/db4
        ./autogen.sh
        CONFIG_SITE=$PWD/depends/x86_64-pc-linux-gnu/share/config.site ./configure BDB_LIBS="-L${BDB_PREFIX}/lib -ldb_cxx-4.8" BDB_CFLAGS="-I${BDB_PREFIX}/include"
        make
        make deploy

    - name: Archive Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: |
          osx/dist/Bitrae-Qt.app
          bitrae-*.dmg
          src/bitraed
          src/bitrae-cli
          src/bitrae-tx
          src/qt/bitrae-qt
          *.exe
          *.tar.gz
